#!/usr/bin/env bash

__powerline() {
	# Unicode symbols
	readonly GIT_BRANCH_SYMBOL='⑂ '
	readonly GIT_BRANCH_CHANGED_SYMBOL='+'
	readonly GIT_NEED_PUSH_SYMBOL='⇡'
	readonly GIT_NEED_PULL_SYMBOL='⇣'

	readonly BG_PATH="\[$(tput setab 4)\]"
	readonly BG_GIT="\[$(tput setab 3)\]"
	readonly BG_ERROR="\[$(tput setab 1)\]"
	readonly BG_SUCCESS="\[$(tput setab 2)\]"

	readonly FG_COLOR="\[$(tput setaf 0)\]"

	readonly DIM="\[$(tput dim)\]"
	readonly REVERSE="\[$(tput rev)\]"
	readonly RESET="\[$(tput sgr0)\]"
	readonly BOLD="\[$(tput bold)\]"

	# what OS?
	OS="$(uname)"
	if [ $OS == "Darwin" ]; then
		readonly PS_SYMBOL=$PS_SYMBOL_DARWIN
	elif [ $OS == "Linux" ]; then
		readonly PS_SYMBOL=$PS_SYMBOL_LINUX
	else
		readonly PS_SYMBOL=$PS_SYMBOL_OTHER
	fi

	__git_info() {
		[[ $POWERLINE_GIT = 0 ]] && return # disabled
		hash git 2>/dev/null || return # git not found
		local git_eng="env LANG=C git"   # force git output in English to make our work easier

		# get current branch name
		local ref=$($git_eng symbolic-ref --short HEAD 2>/dev/null)

		if [[ -n "$ref" ]]; then
			# prepend branch symbol
			ref=$GIT_BRANCH_SYMBOL$ref
		else
			# get tag name or short unique hash
			ref=$($git_eng describe --tags --always 2>/dev/null)
		fi

		[[ -n "$ref" ]] || return  # not a git repo

		local marks

		# scan first two lines of output from `git status`
		while IFS= read -r line; do
			if [[ $line =~ ^## ]]; then # header line
				[[ $line =~ ahead\ ([0-9]+) ]] && marks+=" $GIT_NEED_PUSH_SYMBOL${BASH_REMATCH[1]}"
				[[ $line =~ behind\ ([0-9]+) ]] && marks+=" $GIT_NEED_PULL_SYMBOL${BASH_REMATCH[1]}"
			else # branch is modified if output contains more lines after the header line
				marks="$GIT_BRANCH_CHANGED_SYMBOL$marks"
				break
			fi
		done < <($git_eng status --porcelain --branch 2>/dev/null)  # note the space between the two <

		# print the git branch segment without a trailing newline
		printf " $ref$marks "
	}

	ps1() {
		# Check the exit code of the previous command and display different
		# colors in the prompt accordingly.
		if [ $? -eq 0 ]; then
			local BG_EXIT="$BG_SUCCESS"
		else
			local BG_EXIT="$BG_ERROR"
		fi

		PS1="$BG_PATH$FG_COLOR \w $RESET"
		# Bash by default expands the content of PS1 unless promptvars is disabled.
		# We must use another layer of reference to prevent expanding any user
		# provided strings, which would cause security issues.
		# POC: https://github.com/njhartwell/pw3nage
		# Related fix in git-bash: https://github.com/git/git/blob/9d77b0405ce6b471cb5ce3a904368fc25e55643d/contrib/completion/git-prompt.sh#L324
		if shopt -q promptvars; then
			__powerline_git_info="$(__git_info)"
			PS1+="$BG_GIT$FG_COLOR\${__powerline_git_info}$RESET"
		else
			# promptvars is disabled. Avoid creating unnecessary env var.
			PS1+="$BG_GIT$FG_COLOR$(__git_info)$RESET"
		fi
		PS1+="$BG_EXIT$FG_COLOR $PS_SYMBOL $RESET "
	}

	PROMPT_COMMAND=ps1
}

__powerline
unset __powerline
